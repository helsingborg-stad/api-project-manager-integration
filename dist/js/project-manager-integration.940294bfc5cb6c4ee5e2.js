!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([,function(t,e,n){"use strict";n.r(e);var r=function(){var t=document.querySelector(".js-collapsible-toggle");t&&t.addEventListener("click",(function(t){var e,n,r=t.currentTarget.getAttribute("data-collapsible-target"),o=document.querySelector(r);"true"===o.getAttribute("data-collapsed")?(n=(e=o).scrollHeight,e.style.height=n+"px",e.addEventListener("transitionend",(function t(n){e.removeEventListener("transitionend",t),e.style.height=null})),e.setAttribute("data-collapsed","false"),o.setAttribute("data-collapsed","false"),t.currentTarget.classList.add("is-active")):(!function(t){var e=t.scrollHeight,n=t.style.transition;t.style.transition="",requestAnimationFrame((function(r){t.style.height=e+"px",t.style.transition=n,requestAnimationFrame((function(){t.style.height="0px"}))})),t.setAttribute("data-collapsed","true")}(o),t.currentTarget.classList.remove("is-active"))}))};function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".js-scroll-spy",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i(this,t),!e)throw new Error("First argument cannot be empty");if(!("string"==typeof e||e instanceof HTMLElement))throw new TypeError("menu can be either string or an instance of HTMLElement");if("object"!==o(n))throw new TypeError("options can only be of type object");var r={sectionSelector:"section",targetSelector:"a",offset:0,hrefAttribute:"href",activeClass:"active"};this.menuList=e instanceof HTMLElement?e:document.querySelector(e),this.options=Object.assign({},r,n),this.sections=document.querySelectorAll(this.options.sectionSelector)}var e,n,r;return e=t,(n=[{key:"onScroll",value:function(){var t=this.getCurrentSection(),e=this.getCurrentMenuItem(t);e&&(this.removeCurrentActive({ignore:e}),this.setActive(e))}},{key:"getCurrentSection",value:function(){for(var t=0;t<this.sections.length;t++){var e=this.sections[t],n=window.pageYOffset+e.getBoundingClientRect().top,r=n+e.offsetHeight,o=(document.documentElement.scrollTop||document.body.scrollTop)+this.options.offset;if(o>=n&&o<r)return e}}},{key:"getCurrentMenuItem",value:function(t){if(t){var e=t.getAttribute("id");return this.menuList.querySelector("[".concat(this.options.hrefAttribute,'="#').concat(e,'"]'))}}},{key:"setActive",value:function(t){t.classList.contains(this.options.activeClass)||this.options.activeClass.trim().split(" ").forEach((function(e){return t.classList.add(e)}))}},{key:"removeCurrentActive",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{ignore:null},n=this.options,r=n.hrefAttribute,o=n.targetSelector,i=this.menuList.querySelectorAll("".concat(o,":not([").concat(r,'="').concat(e.ignore.getAttribute(r),'"])'));i.forEach((function(e){t.options.activeClass.trim().split(" ").forEach((function(t){return e.classList.remove(t)}))}))}}])&&c(e.prototype,n),r&&c(e,r),t}();function l(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,n=null;return function(){for(var r=this,o=arguments.length,i=new Array(o),c=0;c<o;c++)i[c]=arguments[c];null===n&&(n=setTimeout((function(){t.apply(r,i),n=null}),e))}}document.addEventListener("DOMContentLoaded",(function(t){var e;!function(){var t=document.querySelector("html").getAttribute("data-header-offset"),e={sectionSelector:".js-scroll-spy-section",targetSelector:"[data-spy-target]",offset:t?Number(t)+20:1,hrefAttribute:"data-spy-target",activeClass:"is-active"},n=document.querySelector(".js-scroll-spy"),r=document.querySelectorAll(".js-scroll-spy-section");if(n&&r&&r.length>0){var o=new s(n,e),i=!0,c=function(){i&&o.onScroll()};window.onload=c,window.onresize=l((function(){i=n.offsetWidth>0&&n.offsetHeight>0}),400),window.addEventListener("scroll",l(c,16))}}(),(e=document.querySelectorAll("form.js-submit"))&&e.length>0&&Object.keys(e).map((function(t){return e[t]})).forEach((function(t){var e=function(e){Object.values(t.elements).forEach((function(t){""===t.value&&t.setAttribute("disabled",!0)})),t.submit()},n=t.querySelectorAll("select");Object.keys(n).length<=0||Object.keys(n).map((function(t){return n[t]})).forEach((function(t){t.addEventListener("change",e)}))})),r()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2pzL2NvbGxhcHNlU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvdmVuZG9yL1Njcm9sbFNweS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvc2Nyb2xsU3B5LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9qcy9hcGktcHJvamVjdC1tYW5hZ2VyLWludGVncmF0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9qcy9hcmNoaXZlRmlsdGVyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29sbGFwc2VUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImVsZW1lbnQiLCJzZWN0aW9uSGVpZ2h0IiwidGFyZ2V0U2VsZWN0b3IiLCJjdXJyZW50VGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwidGFyZ2V0RWxlbWVudCIsInNjcm9sbEhlaWdodCIsInN0eWxlIiwiaGVpZ2h0IiwidHJhbnNpdGlvbmVuZEhhbmRsZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QXR0cmlidXRlIiwiY2xhc3NMaXN0IiwiYWRkIiwiZWxlbWVudFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY29sbGFwc2VTZWN0aW9uIiwicmVtb3ZlIiwiU2Nyb2xsU3B5IiwibWVudSIsIm9wdGlvbnMiLCJFcnJvciIsIkhUTUxFbGVtZW50IiwiVHlwZUVycm9yIiwiZGVmYXVsdE9wdGlvbnMiLCJzZWN0aW9uU2VsZWN0b3IiLCJvZmZzZXQiLCJocmVmQXR0cmlidXRlIiwiYWN0aXZlQ2xhc3MiLCJ0aGlzIiwibWVudUxpc3QiLCJhc3NpZ24iLCJzZWN0aW9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzZWN0aW9uIiwiZ2V0Q3VycmVudFNlY3Rpb24iLCJtZW51SXRlbSIsImdldEN1cnJlbnRNZW51SXRlbSIsInJlbW92ZUN1cnJlbnRBY3RpdmUiLCJpZ25vcmUiLCJzZXRBY3RpdmUiLCJsZW5ndGgiLCJzdGFydEF0Iiwid2luZG93IiwicGFnZVlPZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJlbmRBdCIsIm9mZnNldEhlaWdodCIsImN1cnJlbnRQb3NpdGlvbiIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsImJvZHkiLCJzZWN0aW9uSWQiLCJjb250YWlucyIsInRyaW0iLCJzcGxpdCIsImZvckVhY2giLCJtZW51SXRlbXMiLCJpdGVtIiwidGhyb3R0bGUiLCJmdW5jIiwid2FpdCIsInRpbWVyIiwiYXJncyIsInNldFRpbWVvdXQiLCJhcHBseSIsImV2ZW50IiwiZm9ybUVsZW1lbnRzIiwiaGVhZGVyT2Zmc2V0IiwiTnVtYmVyIiwic2Nyb2xsU3B5TWVudSIsInNjcm9sbFNweVNlY3Rpb25zIiwiU2Nyb2xsU3B5SW5zdGFuY2UiLCJpc1Zpc2libGUiLCJoYW5kbGVTY3JvbGwiLCJvblNjcm9sbCIsIm9ubG9hZCIsIm9ucmVzaXplIiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxTcHkiLCJrZXlzIiwibWFwIiwiZm9ybUVsZW1lbnQiLCJzdWJtaXRIYW5kbGVyIiwidmFsdWVzIiwiZWxlbWVudHMiLCJzdWJtaXQi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akJ4QixlQUFnQixvQkFDaEJ5QixPQUFRMkMsRUFBZUMsT0FBT0QsR0FBZ0IsR0FBSyxFQUNuRDFDLGNBQWUsa0JBQ2ZDLFlBQWEsYUFHWDJDLEVBQWdCNUUsU0FBU0MsY0FBYyxrQkFDdkM0RSxFQUFvQjdFLFNBQVNzQyxpQkFBaUIsMEJBRXBELEdBQUlzQyxHQUFpQkMsR0FBcUJBLEVBQWtCL0IsT0FBUyxFQUFHLENBQ3BFLElBQU1nQyxFQUFvQixJQUFJdkQsRUFBVXFELEVBQWVuRCxHQUduRHNELEdBQVksRUFNVkMsRUFBZSxXQUNiRCxHQUNBRCxFQUFrQkcsWUFLMUJqQyxPQUFPa0MsT0FBU0YsRUFDaEJoQyxPQUFPbUMsU0FBV2xCLEdBWkksV0FDbEJjLEVBQVlILEVBQWNRLFlBQWMsR0FBS1IsRUFBY3ZCLGFBQWUsSUFXcEMsS0FFMUNMLE9BQU85QyxpQkFBaUIsU0FBVStELEVBQVNlLEVBQWMsTUMxQzdESyxJQ0xNWixFQUFlekUsU0FBU3NDLGlCQUFpQixvQkFDM0JtQyxFQUFhM0IsT0FBUyxHQUN0Q3JFLE9BQU82RyxLQUFLYixHQUFjYyxLQUFJLFNBQUFqRyxHQUFHLE9BQUltRixFQUFhbkYsTUFBTXdFLFNBQVEsU0FBQTBCLEdBQzVELElBQU1DLEVBQWdCLFNBQUN0RixHQUNuQjFCLE9BQU9pSCxPQUFPRixFQUFZRyxVQUFVN0IsU0FBUSxTQUFBMUQsR0FDbEIsS0FBbEJBLEVBQVFwQixPQUNSb0IsRUFBUVcsYUFBYSxZQUFZLE1BR3pDeUUsRUFBWUksVUFHVkMsRUFBaUJMLEVBQVlsRCxpQkFBaUIsVUFDaEQ3RCxPQUFPNkcsS0FBS08sR0FBZ0IvQyxRQUFVLEdBSTFDckUsT0FBTzZHLEtBQUtPLEdBQWdCTixLQUFJLFNBQUFqRyxHQUFHLE9BQUl1RyxFQUFldkcsTUFBTXdFLFNBQVEsU0FBQWdDLEdBQ2hFQSxFQUFjNUYsaUJBQWlCLFNBQVV1RixTRFhyRHBFIiwiZmlsZSI6ImpzL3Byb2plY3QtbWFuYWdlci1pbnRlZ3JhdGlvbi45NDAyOTRiZmM1Y2I2YzRlZTVlMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImZ1bmN0aW9uIGNvbGxhcHNlU2VjdGlvbihlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VjdGlvbkhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIGNvbnN0IGVsZW1lbnRUcmFuc2l0aW9uID0gZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uO1xuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzZWN0aW9uSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gZWxlbWVudFRyYW5zaXRpb247XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAwICsgJ3B4JztcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jb2xsYXBzZWQnLCAndHJ1ZScpO1xufVxuICBcbmZ1bmN0aW9uIGV4cGFuZFNlY3Rpb24oZWxlbWVudCkge1xuICAgIGNvbnN0IHNlY3Rpb25IZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IHNlY3Rpb25IZWlnaHQgKyAncHgnO1xuXG4gICAgY29uc3QgdHJhbnNpdGlvbmVuZEhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRyYW5zaXRpb25lbmRIYW5kbGVyKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudWxsO1xuICAgIH1cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0cmFuc2l0aW9uZW5kSGFuZGxlcik7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29sbGFwc2VkJywgJ2ZhbHNlJyk7XG59XG4gIFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjb2xsYXBzZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jb2xsYXBzaWJsZS10b2dnbGUnKTtcbiAgICBpZiAoIWNvbGxhcHNlVGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb2xsYXBzZVRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbGxhcHNpYmxlLXRhcmdldCcpO1xuICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgIGNvbnN0IGlzQ29sbGFwc2VkID0gdGFyZ2V0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sbGFwc2VkJykgPT09ICd0cnVlJztcblxuICAgICAgICBpZiAoaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICBleHBhbmRTZWN0aW9uKHRhcmdldEVsZW1lbnQpXG4gICAgICAgICAgdGFyZ2V0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29sbGFwc2VkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sbGFwc2VTZWN0aW9uKHRhcmdldEVsZW1lbnQpO1xuICAgICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsU3B5IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlcyBhIG5ldyB7QGNvZGUgU2Nyb2xsU3B5fSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEhUTUxFbGVtZW50fSBtZW51IC0gU2VsZWN0b3IgdG8gbmF2IG1lbnUuXG4gICAgICogQHBhcmFtIHt7XG4gICAgICogIHNlY3Rpb25TZWxlY3Rvcjogc3RyaW5nO1xuICAgICAqICB0YXJnZXRTZWxlY3Rvcjogc3RyaW5nO1xuICAgICAqICBvZmZzZXQ6IG51bWJlcjtcbiAgICAgKiAgaHJlZkF0dHJpYnV0ZTogc3RyaW5nO1xuICAgICAqICBhY3RpdmVDbGFzczogc3RyaW5nO1xuICAgICAqIH19IG9wdGlvbnMgLSBPcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVudSA9ICcuanMtc2Nyb2xsLXNweScsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoIW1lbnUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgY2Fubm90IGJlIGVtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodHlwZW9mIG1lbnUgPT09ICdzdHJpbmcnIHx8IG1lbnUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgJ21lbnUgY2FuIGJlIGVpdGhlciBzdHJpbmcgb3IgYW4gaW5zdGFuY2Ugb2YgSFRNTEVsZW1lbnQnXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBjYW4gb25seSBiZSBvZiB0eXBlIG9iamVjdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgc2VjdGlvblNlbGVjdG9yOiAnc2VjdGlvbicsXG4gICAgICAgICAgICB0YXJnZXRTZWxlY3RvcjogJ2EnLFxuICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgaHJlZkF0dHJpYnV0ZTogJ2hyZWYnLFxuICAgICAgICAgICAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubWVudUxpc3QgPVxuICAgICAgICBtZW51IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBtZW51IDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtZW51KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdGlvbnMuc2VjdGlvblNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHNjcm9sbCBieSBmaW5kaW5nIHRoZSBzZWN0aW9uXG4gICAgICogYW5kIHNldHRpbmcgdGhlIGFjdGl2ZSBjbGFzcyBuYW1lLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgb25TY3JvbGwoKSB7XG4gICAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzLmdldEN1cnJlbnRTZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IG1lbnVJdGVtID0gdGhpcy5nZXRDdXJyZW50TWVudUl0ZW0oc2VjdGlvbik7XG5cbiAgICAgICAgaWYgKG1lbnVJdGVtKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUN1cnJlbnRBY3RpdmUoeyBpZ25vcmU6IG1lbnVJdGVtIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmUobWVudUl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2VjdGlvbiB3aGVyZSB0aGUgY3VycmVudFxuICAgICAqIHNjcm9sbCBwb3NpdGlvbiBpcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50U2VjdGlvbigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbiA9IHRoaXMuc2VjdGlvbnNbaV07XG4gICAgICAgICAgICBjb25zdCBzdGFydEF0ID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgc2VjdGlvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGVuZEF0ID0gc3RhcnRBdCArIHNlY3Rpb24ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFBvc2l0aW9uID1cbiAgICAgICAgICAgIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApICsgdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IGlzSW5WaWV3ID1cbiAgICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbiA+PSBzdGFydEF0ICYmIGN1cnJlbnRQb3NpdGlvbiA8IGVuZEF0O1xuICAgICAgICAgICAgaWYgKGlzSW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtZW51IGl0ZW0gdG8gd2hpY2ggdGhlXG4gICAgICogY3VycmVudCBzY3JvbGwgcG9zaXRpb24gaXMgcG9pbnRpbmcgdG8uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzZWN0aW9uIC0gVGhlIGN1cnJlbnQgc2VjdGlvblxuICAgICAqIEByZXR1cm5zIHtIVE1MQW5jaG9yRWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50TWVudUl0ZW0oc2VjdGlvbikge1xuICAgICAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlY3Rpb25JZCA9IHNlY3Rpb24uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5tZW51TGlzdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYFske3RoaXMub3B0aW9ucy5ocmVmQXR0cmlidXRlfT1cIiMke3NlY3Rpb25JZH1cIl1gXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhY3RpdmUgY2xhc3MgdG8gdGhlIHBhc3NlZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MQW5jaG9yRWxlbWVudH0gbWVudUl0ZW0gLSBNZW51IGl0ZW0gb2YgY3VycmVudCBzZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIHNldEFjdGl2ZShtZW51SXRlbSkge1xuICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IG1lbnVJdGVtLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVDbGFzc2VzID0gdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgYWN0aXZlQ2xhc3Nlcy5mb3JFYWNoKChhY3RpdmVDbGFzcykgPT5cbiAgICAgICAgICAgICAgICBtZW51SXRlbS5jbGFzc0xpc3QuYWRkKGFjdGl2ZUNsYXNzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWN0aXZlIGNsYXNzIGZyb20gYWxsIG5hdiBsaW5rc1xuICAgICAqIGV4Y2VwdCB0aGUgc3BlY2lmaWVkIGlnbm9yZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHt7XG4gICAgICogIGlnbm9yZTogSFRNTEFuY2hvckVsZW1lbnRcbiAgICAgKiB9fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgcmVtb3ZlQ3VycmVudEFjdGl2ZShvcHRpb25zID0geyBpZ25vcmU6IG51bGwgfSkge1xuICAgICAgICBjb25zdCB7IGhyZWZBdHRyaWJ1dGUsIHRhcmdldFNlbGVjdG9yIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1lbnVJdGVtcyA9IHRoaXMubWVudUxpc3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIGAke3RhcmdldFNlbGVjdG9yfTpub3QoWyR7aHJlZkF0dHJpYnV0ZX09XCIke29wdGlvbnMuaWdub3JlLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICBocmVmQXR0cmlidXRlXG4gICAgICAgICAgICApfVwiXSlgXG4gICAgICAgICk7XG5cbiAgICAgICAgbWVudUl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUNsYXNzZXMgPSB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICBhY3RpdmVDbGFzc2VzLmZvckVhY2goKGFjdGl2ZUNsYXNzKSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShhY3RpdmVDbGFzcylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJcbmltcG9ydCBTY3JvbGxTcHkgZnJvbSAnLi92ZW5kb3IvU2Nyb2xsU3B5JztcblxuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCA9IDEwMCkge1xuICAgIGxldCB0aW1lciA9IG51bGw7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCB3YWl0KTsgXG4gICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlck9mZnNldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGVhZGVyLW9mZnNldCcpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHNlY3Rpb25TZWxlY3RvcjogJy5qcy1zY3JvbGwtc3B5LXNlY3Rpb24nLFxuICAgICAgICB0YXJnZXRTZWxlY3RvcjogJ1tkYXRhLXNweS10YXJnZXRdJyxcbiAgICAgICAgb2Zmc2V0OiBoZWFkZXJPZmZzZXQgPyBOdW1iZXIoaGVhZGVyT2Zmc2V0KSArIDIwIDogMSxcbiAgICAgICAgaHJlZkF0dHJpYnV0ZTogJ2RhdGEtc3B5LXRhcmdldCcsXG4gICAgICAgIGFjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2Nyb2xsU3B5TWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zY3JvbGwtc3B5Jyk7XG4gICAgY29uc3Qgc2Nyb2xsU3B5U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtc2Nyb2xsLXNweS1zZWN0aW9uJyk7XG5cbiAgICBpZiAoc2Nyb2xsU3B5TWVudSAmJiBzY3JvbGxTcHlTZWN0aW9ucyAmJiBzY3JvbGxTcHlTZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IFNjcm9sbFNweUluc3RhbmNlID0gbmV3IFNjcm9sbFNweShzY3JvbGxTcHlNZW51LCBvcHRpb25zKTtcblxuICAgICAgICAvLyBGaXJlIHNjcm9sbCBldmVudHMgb25seSB3aGVuIHNweSBtZW51IGlzIHZpc2libGVcbiAgICAgICAgbGV0IGlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgaXNNZW51VmlzaWJsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlzVmlzaWJsZSA9IHNjcm9sbFNweU1lbnUub2Zmc2V0V2lkdGggPiAwICYmIHNjcm9sbFNweU1lbnUub2Zmc2V0SGVpZ2h0ID4gMDtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgU2Nyb2xsU3B5SW5zdGFuY2Uub25TY3JvbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuXG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBoYW5kbGVTY3JvbGw7XG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9IHRocm90dGxlKGlzTWVudVZpc2libGUsIDQwMCk7XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlKGhhbmRsZVNjcm9sbCwgMTYpKTsgLy90aHJvdHRsZSB0byByb3VnaCA2MGZwc1xuICAgIH1cbn07XG4iLCJpbXBvcnQgYXJjaGl2ZUZpbHRlciBmcm9tICcuL2FyY2hpdmVGaWx0ZXInO1xuaW1wb3J0IGNvbGxhcHNlU2VjdGlvbiBmcm9tICcuL2NvbGxhcHNlU2VjdGlvbic7XG5pbXBvcnQgc2Nyb2xsU3B5IGZyb20gJy4vc2Nyb2xsU3B5JztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gRG8gc3R1ZmZcbiAgICBzY3JvbGxTcHkoKTtcbiAgICBhcmNoaXZlRmlsdGVyKCk7XG4gICAgY29sbGFwc2VTZWN0aW9uKCk7XG59KTsiLCJleHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgY29uc3QgZm9ybUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybS5qcy1zdWJtaXQnKTtcbiAgICBpZiAoZm9ybUVsZW1lbnRzICYmIGZvcm1FbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1FbGVtZW50cykubWFwKGtleSA9PiBmb3JtRWxlbWVudHNba2V5XSkuZm9yRWFjaChmb3JtRWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdWJtaXRIYW5kbGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKGZvcm1FbGVtZW50LmVsZW1lbnRzKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBmb3JtRWxlbWVudC5zdWJtaXQoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdEVsZW1lbnRzID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoc2VsZWN0RWxlbWVudHMpLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzZWxlY3RFbGVtZW50cykubWFwKGtleSA9PiBzZWxlY3RFbGVtZW50c1trZXldKS5mb3JFYWNoKHNlbGVjdEVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc3VibWl0SGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9XG59O1xuICAiXSwic291cmNlUm9vdCI6IiJ9